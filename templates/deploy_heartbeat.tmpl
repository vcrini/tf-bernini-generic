version: 0.2
env:
  variables:
    AWS_DESIRED_COUNT: ${aws_desired_count}
    AWS_ECS_CLUSTER: ${aws_ecs_cluster}
    AWS_SECURITY_GROUP: "${aws_security_group}"
    AWS_SERVICE_NAME: ${aws_service_name}
    AWS_STREAM_PREFIX: ${aws_stream_prefix}
    AWS_SUBNET: "${aws_subnet}"
    DEPLOYMENT_MAX_PERCENT: ${deployment_max_percent}
    DEPLOYMENT_MIN_HEALTHY_PERCENT: ${deployment_min_healthy_percent}
    ECS_IMAGE_PULL_BEHAVIOR: ${ecs_image_pull_behavior}
    TASK_ROLE_ARN: ${task_role_arn}
    image_repo: ${image_repo} 
    image_repo_name: ${image_repo_name} 
    proxy_name: ${proxy_name}
    %{ for config_key, config_value in container_env }${config_key}: ${config_value} 
    %{ endfor ~}

  parameter-store:
    ELASTICSEARCH_CO_PASSWORD: "bitgdi-heartbeat-co-password"

  exported-variables:
    - ELASTICSEARCH_CO_PASSWORD
    %{ for config_key, config_value in container_env }- ${config_key}
    %{ endfor ~}

phases:
  build:
    commands:
      #- echo "[ECHO] Running using sbt publish to compile STEP at $(date)"
      #- git clone https://github.com/vcrini/aws-utilities --depth=1 utilities
      #- app_image_version=`grep -Po '(?<=^export IMAGE_TAG=).+$' build.sh`
      #- app_repo=`utilities/ecr_image_check.sh $image_repo $image_repo_name $app_image_version skip_ecr_check`
      #- tag=`cat tag`
      #- app_image_version=`utilities/remove_snapshot.sh $app_image_version` 
      #- CMD="utilities/ecs-cli compose --cluster $AWS_ECS_CLUSTER --project-name $AWS_SERVICE_NAME$version_count --file docker-compose.yml --file docker-compose.aws.yml --ecs-params ecs-params.yml service up --deployment-max-percent $DEPLOYMENT_MAX_PERCENT --deployment-min-healthy-percent $DEPLOYMENT_MIN_HEALTHY_PERCENT --force-deployment "
      #- echo $CMD
      #- exec $CMD
      #- latest_task_definition_arn=`aws ecs list-task-definitions --max-items 1 --sort DESC --family-prefix $AWS_SERVICE_NAME | jq -r ".taskDefinitionArns[0]"`
      #- echo $latest_task_definition_arn
      #- formatted_tag=`echo $tag| perl -ne '@x=split/=/;print "key=$x[0],value=$x[1]"'`
      #- echo $formatted_tag
      #- CMD3="aws ecs tag-resource --resource-arn $latest_task_definition_arn --tags $formatted_tag"
      #- echo $CMD3
      #- exec $CMD3
      #- |-
      #  if [ "$AWS_DESIRED_COUNT" -gt 0 ]; then
      #    CMD="utilities/ecs-cli compose --cluster $AWS_ECS_CLUSTER --project-name $AWS_SERVICE_NAME$version_count service scale --deployment-max-percent $DEPLOYMENT_MAX_PERCENT --deployment-min-healthy-percent $DEPLOYMENT_MIN_HEALTHY_PERCENT $AWS_DESIRED_COUNT"
      #    echo $CMD
      #    exec $CMD
      #   fi

      - echo "[ECHO] deploying STEP at $(date)"
      - export ecr_repositories=(%{ for r in ecr_repositories ~}'${r}' %{ endfor ~})
      - tag=`cat tag`
      - git clone https://github.com/vcrini/aws-utilities  -b 1.0   --depth=1 utilities
      - app_image_version=`grep -Po '(?<=^export IMAGE_TAG=).+$' build.sh`
      - ecr_urls=()
      - |
        for ((i=0; i<$${#ecr_repositories[@]}; i++))
        do
          echo "ecr $${ecr_repositories[$i]}:"
          repo=`utilities/ecr_image_check.sh $image_repo $${ecr_repositories[$i]} $app_image_version`
          echo "repo->$repo"
          image_version=`utilities/remove_snapshot.sh $app_image_version` 
          echo "image_version->$image_version"
          repo=$repo:$app_image_version
          echo "repo->$repo"
          ecr_urls+=($repo)
        done
        export repo=$${ecr_urls[0]}
      - CMD="utilities/ecs-cli compose --cluster $AWS_ECS_CLUSTER --project-name $AWS_SERVICE_NAME$version_count --file docker-compose.yml --file docker-compose.aws.yml --ecs-params ecs-params.yml service up --deployment-max-percent $DEPLOYMENT_MAX_PERCENT --deployment-min-healthy-percent $DEPLOYMENT_MIN_HEALTHY_PERCENT  --force-deployment --tags $tag"
      - echo $CMD
      - exec $CMD
      - |-
        if [ "$AWS_DESIRED_COUNT" -gt 0 ]; then
           CMD="utilities/ecs-cli compose --cluster $AWS_ECS_CLUSTER --project-name $AWS_SERVICE_NAME$version_count service scale --deployment-max-percent $DEPLOYMENT_MAX_PERCENT --deployment-min-healthy-percent $DEPLOYMENT_MIN_HEALTHY_PERCENT $AWS_DESIRED_COUNT"
           echo $CMD
           exec $CMD
        fi
