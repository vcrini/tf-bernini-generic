version: 0.2
env:
  variables:
    dockerhub_user: ${dockerhub_user}
    environment: ${environment}
    image_repo: ${image_repo} 
    image_repo_name: ${image_repo_name}
    proxy_name: ${proxy_name}
  parameter-store:
    dockerhub_password: bitgdi-dockerhub-password

phases:

  pre_build:
    commands:
      - echo "[ECHO] Running pre_build STEP at $(date)"
      - export ecr_repositories=(%{ for r in ecr_repositories ~}'${r}' %{ endfor ~})
      - git clone https://github.com/vcrini/aws-utilities  -b 1.0   --depth=1 utilities
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - docker login --username $dockerhub_user --password $dockerhub_password
      - app_image_version=`grep -Po '(?<=^export IMAGE_TAG=).+$' build.sh`
      - ecr_urls=()
      - |
        for ((i=0; i<$${#ecr_repositories[@]}; i++))
        do
          echo "ecr $${ecr_repositories[$i]}:"
          repo=`utilities/ecr_image_check.sh $image_repo $${ecr_repositories[$i]} $app_image_version`
          echo "repo->$repo"
          image_version=`utilities/remove_snapshot.sh $app_image_version` 
          echo "image_version->$image_version"
          repo=$repo:$app_image_version
          echo "repo->$repo"
          ecr_urls+=($repo)
          docker pull $repo || true
        done
        export ecr_urls

  build:
    commands:
      - | 
        BUILDS=("docker build -t $${ecr_urls[0]} --cache-from  $${ecr_urls[0]} --build-arg environment .")
        for ((i=0; i<$${#BUILDS[@]}; i++))
        do 
          echo $${BUILDS[$i]}
          eval $${BUILDS[$i]} 
        done

  post_build:
    commands:
      - echo "[ECHO] Running post_build STEP at $(date)"
      - |  
        echo $${ecr_urls[0]}
        for ((i=0; i<$${#ecr_urls[@]}; i++))
        do 
         echo "[ECHO] Docker push image $${ecr_urls[$i]}"
         docker push $${ecr_urls[$i]}
        done 

      - help1="paste following content in 'imagedefinitions.json' inside repository '%s' if not present\n" 
      - printf '[{"name":"app","imageUri":"%s"}]' $${ecr_urls[0]}| python -m json.tool
      - printf 'app=%s' $${ecr_urls[0]} > tag

artifacts:
    files:
      - build.sh
      - ecs-params.yml
      - docker-compose.yml
      - docker-compose.aws.yml
      - tag
